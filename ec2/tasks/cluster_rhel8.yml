---
- name: gather information about VPC
  ec2_vpc_net_info:
    region: "{{ region }}"
    filters:
      "tag:Name": "{{ lab_vpc_name }}"
  register: vpc_info

- name: gather information about subnet (public)
  ec2_vpc_subnet_info:
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].id }}"
      "tag:Type": public
  register: subnet_info_public

- name: gather information about subnet (private)
  ec2_vpc_subnet_info:
    region: "{{ region }}"
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].id }}"
      "tag:Type": private
  register: subnet_info_private

- name: security group for AP
  ec2_group:
    name: AP
    description: AP
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    state: present
    rules:
      - proto: tcp
        ports:
          - 443
          - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 22
          - 4369
          - 5672
          - 15672
          - 25672
          - 27199
        cidr_ip: "{{ public_cidr_block }}"
    tags:
      Name: AP
      Owner: "{{ owner }}"
  register: security_group_ap

- name: security group for DB
  ec2_group:
    name: DB
    description: DB
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    state: present
    rules:
      - proto: tcp
        ports:
          - 5432
          - 22
        cidr_ip: "{{ public_cidr_block }}"
    tags:
      Name: DB
      Owner: "{{ owner }}"
  register: security_group_db

- name: create a VM (AP1)
  ec2:
    instance_type: t2.medium
    image: "{{ ami_rhel84 }}"
    wait: true
    assign_public_ip: true
    vpc_subnet_id: "{{ item.subnet_id }}"
    group_id: "{{ security_group_ap.group_id }}"
    region: "{{ region }}"
    key_name: "{{ key }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: 30
        volume_type: gp2
        delete_on_termination: true
    instance_tags:
      Name: "Cluster AP RHEL8 #1"
      Owner: "{{ owner }}"
  with_random_choice: "{{ subnet_info_public.subnets }}"
  register: ap1

- name: create a VM (AP2)
  ec2:
    instance_type: t2.medium
    image: "{{ ami_rhel84 }}"
    wait: true
    assign_public_ip: true
    vpc_subnet_id: "{{ item.subnet_id }}"
    group_id: "{{ security_group_ap.group_id }}"
    region: "{{ region }}"
    key_name: "{{ key }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: 30
        volume_type: gp2
        delete_on_termination: true
    instance_tags:
      Name: "Cluster AP RHEL8 #2"
      Owner: "{{ owner }}"
  with_random_choice: "{{ subnet_info_public.subnets }}"
  register: ap2

- name: create a VM (AP3)
  ec2:
    instance_type: t2.medium
    image: "{{ ami_rhel84 }}"
    wait: true
    assign_public_ip: true
    vpc_subnet_id: "{{ item.subnet_id }}"
    group_id: "{{ security_group_ap.group_id }}"
    region: "{{ region }}"
    key_name: "{{ key }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: 30
        volume_type: gp2
        delete_on_termination: true
    instance_tags:
      Name: "Cluster AP RHEL8 #3"
      Owner: "{{ owner }}"
  with_random_choice: "{{ subnet_info_public.subnets }}"
  register: ap3

- name: create a VM (DB)
  ec2:
    instance_type: t2.medium
    image: "{{ ami_rhel84 }}"
    wait: true
    assign_public_ip: false
    vpc_subnet_id: "{{ item.subnet_id }}"
    group_id: "{{ security_group_db.group_id }}"
    region: "{{ region }}"
    key_name: "{{ key }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: 30
        volume_type: gp2
        delete_on_termination: true
    instance_tags:
      Name: "Cluster DB RHEL8"
      Owner: "{{ owner }}"
  with_random_choice: "{{ subnet_info_private.subnets }}"

- name: security group for ALB
  ec2_group:
    name: ALB
    description: ALB
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    state: present
    rules:
      - proto: tcp
        ports:
          - 443
        cidr_ip: 0.0.0.0/0
    tags:
      Name: ALB
      Owner: "{{ owner }}"
  register: security_group_alb

- name: create a target group
  elb_target_group:
    name: ClusterRHEL8
    protocol: http
    port: 80
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].id }}"
    state: present
    wait: false
    health_check_protocol: http
    health_check_port: 80
    health_check_path: /api/v2/ping/
    targets:
      - Id: "{{ ap1.results[0].instances[0].id }}"
        Port: 80
      - Id: "{{ ap2.results[0].instances[0].id }}"
        Port: 80
      - Id: "{{ ap3.results[0].instances[0].id }}"
        Port: 80
    tags:
      Name: "Cluster RHEL8"
      Owner: "{{ owner }}"

- name: obtain all ACM certificates
  aws_acm_info:
  register: acm_info

- name: create an Application load balancer
  elb_application_lb:
    name: ALBRHEL8
    state: present
    subnets: "{{ subnet_info_public | json_query('subnets[*].id') }}"
    security_groups:
      - "{{ security_group_alb.group_id }}"
    listeners:
      - Protocol: HTTPS
        Port: 443
        SslPolicy: ELBSecurityPolicy-2016-08
        Certificates:
          - CertificateArn: "{{ acm_info.certificates[0].certificate_arn }}"
        DefaultActions:
          - Type: forward
            TargetGroupName: ClusterRHEL8
    tags:
      Name: "ALB RHEL8"
      Owner: "{{ owner }}"

